# Function that debug the phonetizer proecess

# def phonetise(text):
#     utterances = text.splitlines()
#     result = u'' #Pronunciations Dictionary
#     utterancesPronuncations = [] #Most likely pronunciation for all utterances
#     utterancesPronuncationsWithBoundaries = [] #Most likely pronunciation for all utterances

#     #-----------------------------------------------------------------------------------------------------
#     #Loop through utterances------------------------------------------------------------------------------
#     #-----------------------------------------------------------------------------------------------------
#     utteranceNumber = 1
#     for utterance in utterances:
#         utteranceNumber += 1
#         utterancesPronuncations.append('') # Add empty entry that will hold this utterance's pronuncation
#         utterancesPronuncationsWithBoundaries.append('') # Add empty entry that will hold this utterance's pronuncation

#         utterance = arabicToBuckwalter(utterance)
#         print(u"DEBUG: Original utterance in Buckwalter:")
#         print(utterance)
        
#         #Do some normalisation work and split utterance to words
#         utterance = utterance.replace(u'AF', u'F')
#         utterance = utterance.replace(u'\u0640', u'')
#         utterance = utterance.replace(u'o', u'')
#         utterance = utterance.replace(u'aA', u'A')
#         utterance = utterance.replace(u'aY', u'Y')
#         utterance = re.sub(u'([^\\-]) A', u'\\1 ', utterance)
#         utterance = utterance.replace(u'F', u'an')
#         utterance = utterance.replace(u'N', u'un')
#         utterance = utterance.replace(u'K', u'in')
#         utterance = utterance.replace(u'|', u'>A')
        
#         print(u"DEBUG: After normalization:")
#         print(utterance)
        
#         #Deal with Hamza types that when not followed by a short vowel letter,
#         #this short vowel is added automatically
#         utterance = re.sub(u'^Ai', u'<i', utterance)
#         utterance = re.sub(u'^Aa', u'>a', utterance)
#         utterance = re.sub(u'^Au', u'>u', utterance)
#         utterance = re.sub(u'Ai', u'<i', utterance)
#         utterance = re.sub(u'Aa', u'>a', utterance)
#         utterance = re.sub(u'Au', u'>u', utterance)
#         utterance = re.sub(u'^Al', u'>al', utterance)
#         utterance = re.sub(u' - Al', u' - >al', utterance)
#         utterance = re.sub(u'^- Al', u'- >al', utterance)
#         utterance = re.sub(u'^>([^auAw])', u'>a\\1', utterance)
#         utterance = re.sub(u' >([^auAw ])', u' >a\\1', utterance)
#         utterance = re.sub(u'<([^i])', u'<i\\1', utterance)
#         utterance = re.sub(u' A([^aui])', u' \\1', utterance)
#         utterance = re.sub(u'^A([^aui])', u'\\1', utterance)
        
#         print(u"DEBUG: After Hamza processing:")
#         print(utterance)
        
#         utterance = utterance.split(u' ')
#         print(u"DEBUG: Words after splitting:")
#         print(utterance)
        
#         #---------------------------
#         wordIndex = -1
        
#         #Loop through words
#         for word in utterance:
#             wordIndex += 1
#             print(u"DEBUG: Processing word: " + word)
            
#             if(not word in [u'-', u'sil']):
#                 pronunciations = [] #Start with empty set of possible pronunciations of current word
#                 result = isFixedWord(word, result, word, pronunciations) #Add fixed irregular pronunciations if possible
                
#                 print(u"DEBUG: After fixed word check. Pronunciations so far:")
#                 print(pronunciations)

#                 emphaticContext = False #Indicates whether current character is in an emphatic context or not. Starts with False
#                 word = u'bb' + word + u'ee' #This is the end/beginning of word symbol. just for convenience
#                 print(u"DEBUG: Word with boundaries: " + word)

#                 phones = [] #Empty list which will hold individual possible word's pronunciation

#                 #-----------------------------------------------------------------------------------
#                 #MAIN LOOP: here is where the Modern Standard Arabic phonetisation rule-set starts--
#                 #-----------------------------------------------------------------------------------
#                 for index in range(2, len(word) - 2):
#                     letter = word[index] #Current Character
#                     letter1 = word[index + 1] #Next Character
#                     letter2 = word[index + 2] #Next-Next Character
#                     letter_1 = word[index - 1] #Previous Character
#                     letter_2 = word[index - 2] #Before Previous Character
                    
#                     print(f"DEBUG: Index {index}, Processing letter: {letter}, next: {letter1}, next-next: {letter2}, prev: {letter_1}")
                    
#                     #----------------------------------------------------------------------------------------------------------------
#                     if(letter in consonants + [u'w', u'y'] and not letter in emphatics + [u'r', u'l']): #non-emphatic consonants (except for Lam and Ra) change emphasis back to False
#                         emphaticContext = False
#                     if(letter in emphatics): #Emphatic consonants change emphasis context to True
#                         emphaticContext = True
#                     if(letter1 in emphatics and not letter1 in forwardEmphatics): #If following letter is backward emphatic, emphasis state is set to True
#                         emphaticContext = True
                    
#                     print(f"DEBUG: Emphatic context: {emphaticContext}")
#                     #----------------------------------------------------------------------------------------------------------------
#                     #----------------------------------------------------------------------------------------------------------------
#                     if(letter in unambiguousConsonantMap): #Unambiguous consonant phones. These map to a predetermined phoneme
#                         phones += [unambiguousConsonantMap[letter]]
#                         print(f"DEBUG: Added unambiguous consonant: {unambiguousConsonantMap[letter]}")
#                     #----------------------------------------------------------------------------------------------------------------
#                     if(letter == u'l'): #Lam is a consonant which requires special treatment
#                         if((not letter1 in diacritics and not letter1 in vowelMap) and letter2 in [u'~'] and ((letter_1 in [u'A', u'l', u'b']) or (letter_1 in diacritics and letter_2 in [u'A', u'l', u'b']))):#Lam could be omitted in definite article (sun letters)
#                             phones += [ambiguousConsonantMap[u'l'][1]] #omit
#                             print(f"DEBUG: Omitted lam")
#                         else:
#                             phones += [ambiguousConsonantMap[u'l'][0]] #do not omit
#                             print(f"DEBUG: Added lam: {ambiguousConsonantMap[u'l'][0]}")
#                     #----------------------------------------------------------------------------------------------------------------
#                     if(letter == u'~' and not letter_1 in [u'w', u'y'] and len(phones) > 0):#shadda just doubles the letter before it 
#                         phones[-1] += phones[-1]
#                         print(f"DEBUG: Doubled last letter due to shadda: {phones[-1]}")
#                     #----------------------------------------------------------------------------------------------------------------
#                     if(letter == u'|'): #Madda only changes based in emphaticness
#                         if(emphaticContext):
#                             phones += [maddaMap[u'|'][1]]
#                             print(f"DEBUG: Added emphatic madda: {maddaMap[u'|'][1]}")
#                         else:
#                             phones += [maddaMap[u'|'][0]]
#                             print(f"DEBUG: Added non-emphatic madda: {maddaMap[u'|'][0]}")
#                     #----------------------------------------------------------------------------------------------------------------
#                     if(letter == u'p'): #Ta' marboota is determined by the following if it is a diacritic or not
#                         if(letter1 in diacritics):
#                             phones += [ambiguousConsonantMap[u'p'][0]]
#                             print(f"DEBUG: Added ta marboota as {ambiguousConsonantMap[u'p'][0]}")
#                         else:
#                             phones += [ambiguousConsonantMap[u'p'][1]]
#                             print(f"DEBUG: Added ta marboota as {ambiguousConsonantMap[u'p'][1]}")
#                     #----------------------------------------------------------------------------------------------------------------
#                     if(letter in vowelMap):
#                         print(f"DEBUG: Processing vowel: {letter}")
#                         if(letter in [u'w', u'y']): #Waw and Ya are complex they could be consonants or vowels and their gemination is complex as it could be a combination of a vowel and consonants
#                             if(letter1 in diacriticsWithoutShadda + [u'A', u'Y'] or (letter1 in [u'w', u'y'] and not letter2 in diacritics + [u'A', u'w', u'y']) or (letter_1 in diacriticsWithoutShadda and letter1 in consonants + [u'e'])):
#                                 if((letter in [u'w'] and letter_1 in [u'u'] and not letter1 in [u'a', u'i', u'A', u'Y']) or (letter in [u'y'] and letter_1 in [u'i'] and not letter1 in [u'a', u'u', u'A', u'Y'])):
#                                     if(emphaticContext):
#                                         phones += [vowelMap[letter][1][0]]
#                                         print(f"DEBUG: Added emphatic vowel for w/y: {vowelMap[letter][1][0]}")
#                                     else:
#                                         phones += [vowelMap[letter][0][0]]
#                                         print(f"DEBUG: Added non-emphatic vowel for w/y: {vowelMap[letter][0][0]}")
#                                 else:
#                                     if(letter1 in [u'A'] and letter in [u'w'] and letter2 in [u'e']):
#                                         phones += [[vowelMap[letter][0][0], ambiguousConsonantMap[letter]]]
#                                         print(f"DEBUG: Added complex w/y option: {[vowelMap[letter][0][0], ambiguousConsonantMap[letter]]}")
#                                     else:
#                                         phones += [ambiguousConsonantMap[letter]]
#                                         print(f"DEBUG: Added w/y as consonant: {ambiguousConsonantMap[letter]}")
#                             elif(letter1 in [u'~']):
#                                 if(letter_1 in [u'a'] or (letter in [u'w'] and letter_1 in [u'i', u'y']) or (letter in [u'y'] and letter_1 in [u'w', u'u'])):
#                                     phones += [ambiguousConsonantMap[letter], ambiguousConsonantMap[letter]]
#                                     print(f"DEBUG: Added doubled w/y: {ambiguousConsonantMap[letter]}")
#                                 else:
#                                     phones += [vowelMap[letter][0][0], ambiguousConsonantMap[letter]]
#                                     print(f"DEBUG: Added w/y vowel+consonant: {vowelMap[letter][0][0], ambiguousConsonantMap[letter]}")
#                             else: #Waws and Ya's at the end of the word could be shortened
#                                 if(emphaticContext):
#                                     if(letter_1 in consonants + [u'u', u'i'] and letter1 in [u'e']):
#                                         phones += [[vowelMap[letter][1][0], vowelMap[letter][1][0][1:]]]
#                                         print(f"DEBUG: Added shortened emphatic w/y: {[vowelMap[letter][1][0], vowelMap[letter][1][0][1:]]}")
#                                     else:
#                                         phones += [vowelMap[letter][1][0]]
#                                         print(f"DEBUG: Added emphatic w/y vowel: {vowelMap[letter][1][0]}")
#                                 else:
#                                     if(letter_1 in consonants + [u'u', u'i'] and letter1 in [u'e']):
#                                         phones += [[vowelMap[letter][0][0], vowelMap[letter][0][0][1:]]]
#                                         print(f"DEBUG: Added shortened non-emphatic w/y: {[vowelMap[letter][0][0], vowelMap[letter][0][0][1:]]}")
#                                     else:
#                                         phones += [vowelMap[letter][0][0]]
#                                         print(f"DEBUG: Added non-emphatic w/y vowel: {vowelMap[letter][0][0]}")
#                         if(letter in [u'u', u'i']): #Kasra and Damma could be mildened if before a final silent consonant
#                             if(emphaticContext):
#                                 if((letter1 in unambiguousConsonantMap or letter1 == u'l') and letter2 == u'e' and len(word) > 7):
#                                     phones += [vowelMap[letter][1][1]]
#                                     print(f"DEBUG: Added mildened emphatic vowel: {vowelMap[letter][1][1]}")
#                                 else:
#                                     phones += [vowelMap[letter][1][0]]
#                                     print(f"DEBUG: Added emphatic vowel: {vowelMap[letter][1][0]}")
#                             else:
#                                 if((letter1 in unambiguousConsonantMap or letter1 == u'l') and letter2 == u'e' and len(word) > 7):
#                                     phones += [vowelMap[letter][0][1]]
#                                     print(f"DEBUG: Added mildened non-emphatic vowel: {vowelMap[letter][0][1]}")
#                                 else:
#                                     phones += [vowelMap[letter][0][0]]
#                                     print(f"DEBUG: Added non-emphatic vowel: {vowelMap[letter][0][0]}")
#                         if(letter in [u'a', u'A', u'Y']): #Alif could be ommited in definite article and beginning of some words
#                             if(letter in [u'A'] and letter_1 in [u'w', u'k'] and letter_2 == u'b' and letter1 in [u'l']):
#                                 phones += [[u'a', vowelMap[letter][0][0]]]
#                                 print(f"DEBUG: Added complex alif option: {[u'a', vowelMap[letter][0][0]]}")
#                             elif(letter in [u'A'] and letter_1 in [u'u', u'i']):
#                                 print(f"DEBUG: Skipping alif after u/i")
#                                 temp = True #do nothing
#                             elif(letter in [u'A'] and letter_1 in [u'w'] and letter1 in [u'e']): #Waw al jama3a: The Alif after is optional
#                                 phones += [[vowelMap[letter][0][1], vowelMap[letter][0][0]]]
#                                 print(f"DEBUG: Added optional alif: {[vowelMap[letter][0][1], vowelMap[letter][0][0]]}")
#                             elif(letter in [u'A', u'Y'] and letter1 in [u'e']):
#                                 if(emphaticContext):
#                                     phones += [[vowelMap[letter][1][0], vowelMap[u'a'][1]]]
#                                     print(f"DEBUG: Added emphatic final alif: {[vowelMap[letter][1][0], vowelMap[u'a'][1]]}")
#                                 else:
#                                     phones += [[vowelMap[letter][0][0], vowelMap[u'a'][0]]]
#                                     print(f"DEBUG: Added non-emphatic final alif: {[vowelMap[letter][0][0], vowelMap[u'a'][0]]}")
#                             else:
#                                 if(emphaticContext):
#                                     phones += [vowelMap[letter][1][0]]
#                                     print(f"DEBUG: Added emphatic alif: {vowelMap[letter][1][0]}")
#                                 else:
#                                     phones += [vowelMap[letter][0][0]]
#                                     print(f"DEBUG: Added non-emphatic alif: {vowelMap[letter][0][0]}")
                
#                 print(u"DEBUG: Final phones array for word:")
#                 print(phones)
#                 #-------------------------------------------------------------------------------------------------------------------------
#                 #End of main loop---------------------------------------------------------------------------------------------------------
#                 #-------------------------------------------------------------------------------------------------------------------------
#                 possibilities = 1 #Holds the number of possible pronunciations of a word

#                 #count the number of possible pronunciations
#                 for letter in phones:
#                     if(isinstance(letter, list)):
#                         possibilities = possibilities * len(letter)
                
#                 print(f"DEBUG: Number of possible pronunciations: {possibilities}")
            
#                 #Generate all possible pronunciations
#                 for i in range(0, possibilities):
#                     pronunciations.append([])
#                     iterations = 1
#                     for index, letter in enumerate(phones):
#                         if(isinstance(letter, list)):
#                             curIndex = (i // iterations) % len(letter)
#                             print(f"DEBUG: Selecting option {curIndex} from {letter}")
#                             if(letter[curIndex] != u''):
#                                 pronunciations[-1].append(letter[curIndex])
#                             iterations = iterations * len(letter)
#                         else:
#                             if(letter != u''):
#                                 pronunciations[-1].append(letter)
                    
#                 print(u"DEBUG: Generated pronunciations before cleanup:")
#                 print(pronunciations)
                    
#                 #Iterate through each pronunciation to perform some house keeping. And append pronunciation to dictionary
#                 # 1- Remove duplicate vowels
#                 # 2- Remove duplicate y and w
#                 for pronunciation in pronunciations:
#                     prevLetter = u''
#                     toDelete = []
#                     for i in range(0, len(pronunciation)):
#                         letter = pronunciation[i]
#                         if(letter in [u'aa', u'uu0', u'ii0', u'AA', u'UU0', u'II0'] and prevLetter.lower() == letter[1:].lower()):#Delete duplicate consecutive vowels
#                             toDelete.append(i - 1)
#                             pronunciation[i] = pronunciation[i - 1][0] + pronunciation[i - 1]
#                             print(f"DEBUG: Merged duplicate vowels: {pronunciation[i]}")
#                         if(letter in [u'u0', u'i0'] and prevLetter.lower() == letter.lower()):#Delete duplicates
#                             toDelete.append(i - 1)
#                             pronunciation[i] = pronunciation[i - 1]
#                             print(f"DEBUG: Removed duplicate short vowel: {letter}")
#                         if(letter in [u'y', u'w'] and prevLetter == letter):#delete duplicate
#                             pronunciation[i - 1] += pronunciation[i - 1]
#                             toDelete.append(i)
#                             print(f"DEBUG: Geminated: {pronunciation[i-1]}")
#                         if(letter in [u'a'] and prevLetter == letter):#delete duplicate
#                             toDelete.append(i)
#                             print(f"DEBUG: Removed duplicate 'a'")
                        
#                         prevLetter = letter
                    
#                     print(f"DEBUG: Indices to delete: {toDelete}")
#                     for i in reversed(range(0, len(toDelete))):
#                         del(pronunciation[toDelete[i]])
                    
#                     print(f"DEBUG: Final pronunciation: {pronunciation}")
#                     result += word[2:-2] + u' ' + u' '.join(pronunciation) + u'\n'

#                 #Append utterance pronunciation to utterancesPronunciations
#                 print(f"DEBUG: Adding to utterancesPronuncations: {' '.join(pronunciations[0])}")
#                 utterancesPronuncations[-1] += u" " + u" ".join(pronunciations[-1])

#                 #Add Stress to each pronunciation
#                 pIndex = 0
#                 for pronunciation in pronunciations:
#                     stressIndex = findStressIndex(pronunciation)
#                     if stressIndex=="": 
#                         print("DEBUG: No stress index found")
#                         continue
#                     if(stressIndex < len(pronunciation) and stressIndex != -1):
#                         pronunciation[stressIndex] += u'\''
#                         print(f"DEBUG: Added stress to {pronunciation[stressIndex]}")
#                     else:
#                         if(pIndex == 0):
#                             print ('DEBUG: Skipped stress on first pronunciation')
#                             print (pronunciation)
#                     pIndex += 1
                    
#                 print(f"DEBUG: Final pronunciation with stress: {pronunciations[0]}")
#                 #Append utterance pronunciation to utterancesPronunciations
#                 utterancesPronuncationsWithBoundaries[-1] += u" " + u"".join(pronunciations[0])
#             else:
#                 utterancesPronuncations[-1] += u" sil"
#                 utterancesPronuncationsWithBoundaries[-1] += u" sil"
        
#         #Add sound file name back
#         utterancesPronuncations[-1] = utterancesPronuncations[-1].strip() + u" sil"
#         utterancesPronuncationsWithBoundaries[-1] = utterancesPronuncationsWithBoundaries[-1].strip() + u" sil"

#     return (utterancesPronuncationsWithBoundaries, utterancesPronuncations, result)



* Note -> all the letters like ث and ش represented as "^" and "$" removed using gen_manifest script